@startuml SD
autonumber
actor "Manager or Collaborator" as MC
participant ":ManColrStatisticsUI" as ui
participant ":ManagerCollaboratorStatisticsController" as ctr
participant "ro\n:RegistOrganization" as ro
participant "org\n:Organization" as org
participant "trs\n:Collection<Transaction>" as trs
participant "lt\n:ListTransaction" as lt
participant "tr\n:Transaction" as tr
participant "trss\n:Collection<Transaction>" as trss
participant "td\n:TaskExecutionDetails" as td
participant "fres\n:Collection<Freelancer>" as fres
participant "result\n:Double"
participant "histData\n:Map<Double,Integer>"

activate MC
        MC -> ui : stars the visualize of overall statistics about freelancers.
        activate ui
                ui -> ctr : fres = getFreelancers()
                activate ctr
                        ctr -> org : lt = getListTransaction()
                        activate org
                        deactivate org
                        ctr -> lt : fres = getFreelancersOfAllTransactions()
                        activate lt
                        deactivate lt
                deactivate ctr
                ui --> MC : shows the freelancers in the system that working in the same oganization\n of the user and requests the user to select which ones to include
        deactivate ui
        MC -> ui : selects the freelancers
        activate ui
                ui -> ctr : setFreelancers(selected)
                activate ctr
                        ctr -> app : ro = getRegistOrganization()
                        activate app
                        deactivate app
                        ctr -> ro : trs = getTransactionsOfFreelancers(selected)
                        activate ro
                                ro -> trs ** : create()
                                loop for each Organization
                                        ro -> ro : org = get(ID)
                                        ro -> org : lt = getListTransaction()
                                        activate org
                                        deactivate org
                                        ro -> lt : trss = getTransactionsOfFreelancers(selected)
                                        activate lt
                                                loop for each Transaction
                                                        lt -> trss ** : create()
                                                        lt -> lt : tr = get(ID)
                                                        lt -> tr : madeTo = madeToAny(selected)
                                                        activate tr
                                                        deactivate tr
                                                        opt madeTo == true
                                                                lt -> trss : add(tr)
                                                                activate trss
                                                                deactivate trss
                                                        end
                                                end
                                        deactivate lt
                                        ro -> trs : addAll(trs)
                                        activate trs
                                        deactivate trs
                                end
                        deactivate ro
                deactivate ctr
                ui -> ctr : result = getMeanDelays()
                activate ctr
                        loop for each Transaction
                                ctr -> trs : tr = get(ID)
                                activate trs
                                deactivate trs
                                ctr -> tr : td = getTaskExecutionDetails()
                                activate tr
                                deactivate tr
                        end
                deactivate ctr
                ui -> ctr : result = getMeanPayments()
                activate ctr
                        loop for each Transaction
                                ctr -> trs : tr = get(ID)
                                activate trs
                                deactivate trs
                                ctr -> tr : getAmount()
                                activate tr
                                deactivate tr
                        end
                deactivate ctr
                ui -> ctr : result = getStandardDeviationDelays()
                activate ctr
                        note over ctr : Same responsibility assignments as getMeanDelays
                deactivate ctr
                ui -> ctr : result = getStandardDeviationPayments()
                activate ctr
                        note over ctr : Same responsibility assignments as getMeanPayments
                deactivate ctr
                ui -> ctr : result = getNumberTransactions()
                activate ctr
                        ctr -> trs : size()
                        activate trs
                        deactivate trs
                deactivate ctr
                ui -> ctr : histData = getHistogramDataDelays(bucketSize)
                activate ctr
                        note over ctr : Same responsibility assignments as getMeanDelays
                deactivate ctr
                ui -> ctr : histData = getHistogramDataPayments(bucketSize)
                activate ctr
                        note over ctr : Same responsibility assignments as getMeanPayments
                deactivate ctr
                ui --> MC : presents the information ( mean and the standard deviation of the delays;\n histogram to analyze the delays ; mean and the standard deviation of\n the payments made )
        deactivate ui
deactivate MC


@enduml